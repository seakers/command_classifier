#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from pyInterface import VASSARInterface
from pyInterface.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  BinaryInputArchitecture eval( inputs)')
    print('  BinaryInputArchitecture evalSpecial( inputs)')
    print('   runLocalSearch( inputs, bool useSpecial)')
    print('   getOrbitList()')
    print('   getInstrumentList()')
    print('   getObjectiveList()')
    print('   getInstrumentsForObjective(string objective)')
    print('   getInstrumentsForPanel(string panel)')
    print('   getCritique( inputs, bool useSpecial)')
    print('   getArchitectureScoreExplanation( arch, bool useSpecial)')
    print('   getPanelScoreExplanation( arch, string panel, bool useSpecial)')
    print('   getObjectiveScoreExplanation( arch, string objective, bool useSpecial)')
    print('  int changeLoadedFiles( params_map)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VASSARInterface.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'eval':
    if len(args) != 1:
        print('eval requires 1 args')
        sys.exit(1)
    pp.pprint(client.eval(eval(args[0]),))

elif cmd == 'evalSpecial':
    if len(args) != 1:
        print('evalSpecial requires 1 args')
        sys.exit(1)
    pp.pprint(client.evalSpecial(eval(args[0]),))

elif cmd == 'runLocalSearch':
    if len(args) != 2:
        print('runLocalSearch requires 2 args')
        sys.exit(1)
    pp.pprint(client.runLocalSearch(eval(args[0]), eval(args[1]),))

elif cmd == 'getOrbitList':
    if len(args) != 0:
        print('getOrbitList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getOrbitList())

elif cmd == 'getInstrumentList':
    if len(args) != 0:
        print('getInstrumentList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentList())

elif cmd == 'getObjectiveList':
    if len(args) != 0:
        print('getObjectiveList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getObjectiveList())

elif cmd == 'getInstrumentsForObjective':
    if len(args) != 1:
        print('getInstrumentsForObjective requires 1 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentsForObjective(args[0],))

elif cmd == 'getInstrumentsForPanel':
    if len(args) != 1:
        print('getInstrumentsForPanel requires 1 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentsForPanel(args[0],))

elif cmd == 'getCritique':
    if len(args) != 2:
        print('getCritique requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCritique(eval(args[0]), eval(args[1]),))

elif cmd == 'getArchitectureScoreExplanation':
    if len(args) != 2:
        print('getArchitectureScoreExplanation requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchitectureScoreExplanation(eval(args[0]), eval(args[1]),))

elif cmd == 'getPanelScoreExplanation':
    if len(args) != 3:
        print('getPanelScoreExplanation requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPanelScoreExplanation(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getObjectiveScoreExplanation':
    if len(args) != 3:
        print('getObjectiveScoreExplanation requires 3 args')
        sys.exit(1)
    pp.pprint(client.getObjectiveScoreExplanation(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'changeLoadedFiles':
    if len(args) != 1:
        print('changeLoadedFiles requires 1 args')
        sys.exit(1)
    pp.pprint(client.changeLoadedFiles(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
